{
  "components": {
    "schemas": {
      "CreateZonePayload": {
        "description": "Zone to create.",
        "properties": {
          "acl": {
            "default": "0.0.0.0/0,::/0",
            "description": "access control list",
            "example": "0.0.0.0/0,::/0",
            "maxLength": 2000,
            "type": "string"
          },
          "contactEmail": {
            "default": "hostmaster@stackit.cloud",
            "description": "contact e-mail for the zone",
            "example": "hostmaster@stackit.cloud",
            "maxLength": 255,
            "type": "string"
          },
          "defaultTTL": {
            "description": "default time to live",
            "example": 3600,
            "minimum": 60,
            "type": "integer"
          },
          "description": {
            "description": "description of the zone",
            "example": "this is our example zone",
            "maxLength": 1024,
            "type": "string"
          },
          "dnsName": {
            "description": "zone name",
            "example": "example.com",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          },
          "expireTime": {
            "description": "expire time",
            "example": 1209600,
            "minimum": 60,
            "type": "integer"
          },
          "isReverseZone": {
            "default": false,
            "description": "if the zone is a reverse zone or not",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "user given name",
            "example": "test",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "negativeCache": {
            "description": "negative caching",
            "example": 60,
            "minimum": 60,
            "type": "integer"
          },
          "primaries": {
            "description": "primary name server for secondary zone",
            "example": [
              "1.2.3.4"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "refreshTime": {
            "description": "refresh time",
            "example": 3600,
            "minimum": 60,
            "type": "integer"
          },
          "retryTime": {
            "description": "retry time",
            "example": 600,
            "minimum": 60,
            "type": "integer"
          },
          "type": {
            "default": "primary",
            "description": "zone type",
            "enum": [
              "primary",
              "secondary"
            ],
            "example": "primary",
            "type": "string"
          }
        },
        "required": [
          "dnsName",
          "name"
        ],
        "type": "object"
      },
      "UpdateRecordSetPayload": {
        "description": "RRSetPatch for rr patch set info.",
        "properties": {
          "comment": {
            "description": "user comment",
            "example": "this is our example comment",
            "maxLength": 255,
            "type": "string"
          },
          "name": {
            "description": "rfc1035 Section 2.3.4",
            "example": "example.com.",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "records": {
            "description": "records",
            "items": {
              "$ref": "#/components/schemas/RecordPayload"
            },
            "type": "array"
          },
          "ttl": {
            "description": "time to live",
            "example": 3600,
            "maximum": 99999999,
            "minimum": 30,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "UpdateZonePayload": {
        "properties": {
          "acl": {
            "default": "0.0.0.0/0,::/0",
            "description": "access control list",
            "example": "0.0.0.0/0,::/0",
            "maxLength": 2000,
            "type": "string"
          },
          "contactEmail": {
            "default": "hostmaster@stackit.cloud",
            "description": "contact e-mail for the zone",
            "example": "hostmaster@stackit.cloud",
            "maxLength": 255,
            "type": "string"
          },
          "defaultTTL": {
            "description": "default time to live",
            "example": 3600,
            "minimum": 60,
            "type": "integer"
          },
          "description": {
            "description": "description of the zone",
            "example": "this is our example zone",
            "maxLength": 1024,
            "type": "string"
          },
          "expireTime": {
            "description": "expire time",
            "example": 1209600,
            "minimum": 60,
            "type": "integer"
          },
          "name": {
            "description": "user given name",
            "example": "test",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "negativeCache": {
            "description": "negative caching",
            "example": 60,
            "minimum": 60,
            "type": "integer"
          },
          "primaries": {
            "description": "primary name server for secondary zone",
            "example": [
              "1.2.3.4"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "refreshTime": {
            "description": "refresh time",
            "example": 3600,
            "minimum": 60,
            "type": "integer"
          },
          "retryTime": {
            "description": "retry time",
            "example": 600,
            "minimum": 60,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateRecordSetPayload": {
        "description": "RRSetPost for rr set info.",
        "properties": {
          "comment": {
            "description": "user comment",
            "example": "this is our example comment",
            "maxLength": 255,
            "type": "string"
          },
          "name": {
            "description": "name of the record which should be a valid domain according to rfc1035 Section 2.3.4",
            "example": "example.com.",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "records": {
            "description": "records",
            "items": {
              "$ref": "#/components/schemas/RecordPayload"
            },
            "type": "array"
          },
          "ttl": {
            "description": "time to live. If nothing provided we will set the zone ttl.",
            "example": 3600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "type": {
            "description": "record set type",
            "enum": [
              "A",
              "AAAA",
              "SOA",
              "CNAME",
              "NS",
              "MX",
              "TXT",
              "SRV",
              "PTR",
              "ALIAS",
              "DNAME",
              "CAA"
            ],
            "example": "A",
            "type": "string"
          }
        },
        "required": [
          "name",
          "records",
          "type"
        ],
        "type": "object"
      },
      "UpdateRecordPayload": {
        "description": "RecordPatch for record patch in record set.",
        "properties": {
          "action": {
            "enum": [
              "add",
              "delete"
            ],
            "type": "string"
          },
          "records": {
            "description": "records",
            "items": {
              "$ref": "#/components/schemas/RecordPayload"
            },
            "type": "array"
          }
        },
        "required": [
          "action",
          "records"
        ],
        "type": "object"
      },
      "ZonesResponse": {
        "description": "ResponseZoneAll for filtered zones.",
        "example": {
          "itemsPerPage": 0,
          "message": "Success",
          "totalItems": 6,
          "totalPages": 1,
          "zones": [
            {
              "acl": "0.0.0.0/0,::/0",
              "active": true,
              "contactEmail": "hostmaster.at.stackit.cloud.",
              "creationFinished": "2022-01-31T10:00:00Z",
              "creationStarted": "2022-01-31T10:00:00Z",
              "defaultTTL": 3600,
              "description": "this is our example zone",
              "dnsName": "example.com",
              "error": "error message",
              "expireTime": 1209600,
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
              "isReverseZone": false,
              "name": "test",
              "negativeCache": 60,
              "primaries": [
                "1.2.3.4"
              ],
              "primaryNameServer": "example.com",
              "recordCount": 300,
              "refreshTime": 3600,
              "retryTime": 600,
              "serialNumber": 2022111400,
              "state": "CREATE_SUCCEEDED",
              "type": "primary",
              "updateFinished": "2022-01-31T10:00:00Z",
              "updateStarted": "2022-01-31T10:00:00Z",
              "visibility": "public"
            },
            {
              "acl": "0.0.0.0/0,::/0",
              "active": true,
              "contactEmail": "hostmaster.at.stackit.cloud.",
              "creationFinished": "2022-01-31T10:00:00Z",
              "creationStarted": "2022-01-31T10:00:00Z",
              "defaultTTL": 3600,
              "description": "this is our example zone",
              "dnsName": "example.com",
              "error": "error message",
              "expireTime": 1209600,
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
              "isReverseZone": false,
              "name": "test",
              "negativeCache": 60,
              "primaries": [
                "1.2.3.4"
              ],
              "primaryNameServer": "example.com",
              "recordCount": 300,
              "refreshTime": 3600,
              "retryTime": 600,
              "serialNumber": 2022111400,
              "state": "CREATE_SUCCEEDED",
              "type": "primary",
              "updateFinished": "2022-01-31T10:00:00Z",
              "updateStarted": "2022-01-31T10:00:00Z",
              "visibility": "public"
            }
          ]
        },
        "properties": {
          "itemsPerPage": {
            "type": "integer"
          },
          "message": {
            "example": "Success",
            "type": "string"
          },
          "totalItems": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          },
          "zones": {
            "items": {
              "$ref": "#/components/schemas/Zone"
            },
            "type": "array"
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "totalPages",
          "zones"
        ],
        "type": "object"
      },
      "CloneZoneRequest": {
        "description": "metadata to clone a zone.",
        "properties": {
          "description": {
            "description": "New Description for the cloned zone. Leave empty to use the same description as the original zone",
            "example": "this is our example zone",
            "maxLength": 1024,
            "type": "string"
          },
          "dnsName": {
            "description": "DnsName is the dns name of the zone to clone",
            "example": "example.com",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          },
          "name": {
            "description": "New Name for the cloned zone. Leave empty to use the same name as the original zone",
            "example": "test",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "dnsName"
        ],
        "type": "object"
      },
      "RecordSet": {
        "description": "RRSet.",
        "example": {
          "active": true,
          "comment": "This is a comment",
          "creationFinished": "2022-01-31T10:00:00Z",
          "creationStarted": "2022-01-31T10:00:00Z",
          "error": "error message",
          "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
          "name": "example.com.",
          "records": [
            {
              "content": "1.2.3.4",
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
            },
            {
              "content": "1.2.3.4",
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
            }
          ],
          "state": "CREATE_SUCCEEDED",
          "ttl": 3600,
          "type": "A",
          "updateFinished": "2022-01-31T10:00:00Z",
          "updateStarted": "2022-01-31T10:00:00Z"
        },
        "properties": {
          "active": {
            "description": "if the record set is active or not",
            "example": true,
            "type": "boolean"
          },
          "comment": {
            "description": "comment",
            "example": "This is a comment",
            "maxLength": 255,
            "type": "string"
          },
          "creationFinished": {
            "description": "when record set creation finished",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "creationStarted": {
            "description": "when record set creation started",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "error": {
            "description": "Error shows error in case create/update/delete failed",
            "example": "error message",
            "maxLength": 2000,
            "type": "string"
          },
          "id": {
            "description": "rr set id",
            "example": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
            "type": "string"
          },
          "name": {
            "description": "name of the record which should be a valid domain according to rfc1035 Section 2.3.4",
            "example": "example.com.",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "records": {
            "description": "records",
            "items": {
              "$ref": "#/components/schemas/Record"
            },
            "minItems": 1,
            "type": "array"
          },
          "state": {
            "description": "record set state",
            "enum": [
              "CREATING",
              "CREATE_SUCCEEDED",
              "CREATE_FAILED",
              "DELETING",
              "DELETE_SUCCEEDED",
              "DELETE_FAILED",
              "UPDATING",
              "UPDATE_SUCCEEDED",
              "UPDATE_FAILED"
            ],
            "example": "CREATE_SUCCEEDED",
            "type": "string"
          },
          "ttl": {
            "description": "time to live",
            "example": 3600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "type": {
            "description": "record set type",
            "enum": [
              "A",
              "AAAA",
              "SOA",
              "CNAME",
              "NS",
              "MX",
              "TXT",
              "SRV",
              "PTR",
              "ALIAS",
              "DNAME",
              "CAA"
            ],
            "example": "A",
            "type": "string"
          },
          "updateFinished": {
            "description": "when record set update/deletion finished",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "updateStarted": {
            "description": "when record set update/deletion started",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          }
        },
        "required": [
          "creationFinished",
          "creationStarted",
          "id",
          "name",
          "records",
          "state",
          "ttl",
          "type",
          "updateFinished",
          "updateStarted"
        ],
        "type": "object"
      },
      "Record": {
        "description": "Record.",
        "example": {
          "content": "1.2.3.4",
          "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
        },
        "properties": {
          "content": {
            "description": "content of the record",
            "example": "1.2.3.4",
            "maxLength": 64000,
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "description": "rr set id",
            "example": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "content",
          "id"
        ],
        "type": "object"
      },
      "MoveCodeResponse": {
        "example": {
          "code": "3sLuLCLpLEbbQ6GZ05tu2U56dmKx1uCdWquTHz6BK34=",
          "expiresAt": "2023-08-08T08:58:25Z",
          "message": "successfully created code to move the zone"
        },
        "properties": {
          "code": {
            "description": "code to move the zone. It is one time shown so better keep it.",
            "example": "3sLuLCLpLEbbQ6GZ05tu2U56dmKx1uCdWquTHz6BK34=",
            "type": "string"
          },
          "expiresAt": {
            "description": "when the code expires",
            "example": "2023-08-08T08:58:25Z",
            "type": "string"
          },
          "message": {
            "description": "human readable message",
            "example": "successfully created code to move the zone",
            "type": "string"
          }
        },
        "required": [
          "code",
          "expiresAt"
        ],
        "type": "object"
      },
      "ErrorMessage": {
        "properties": {
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Message": {
        "example": {
          "message": "message"
        },
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneResponse": {
        "description": "ResponseZone for user info.",
        "example": {
          "message": "Success",
          "zone": {
            "acl": "0.0.0.0/0,::/0",
            "active": true,
            "contactEmail": "hostmaster.at.stackit.cloud.",
            "creationFinished": "2022-01-31T10:00:00Z",
            "creationStarted": "2022-01-31T10:00:00Z",
            "defaultTTL": 3600,
            "description": "this is our example zone",
            "dnsName": "example.com",
            "error": "error message",
            "expireTime": 1209600,
            "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
            "isReverseZone": false,
            "name": "test",
            "negativeCache": 60,
            "primaries": [
              "1.2.3.4"
            ],
            "primaryNameServer": "example.com",
            "recordCount": 300,
            "refreshTime": 3600,
            "retryTime": 600,
            "serialNumber": 2022111400,
            "state": "CREATE_SUCCEEDED",
            "type": "primary",
            "updateFinished": "2022-01-31T10:00:00Z",
            "updateStarted": "2022-01-31T10:00:00Z",
            "visibility": "public"
          }
        },
        "properties": {
          "message": {
            "example": "Success",
            "type": "string"
          },
          "zone": {
            "$ref": "#/components/schemas/Zone"
          }
        },
        "required": [
          "zone"
        ],
        "type": "object"
      },
      "Zone": {
        "description": "Zone.",
        "example": {
          "acl": "0.0.0.0/0,::/0",
          "active": true,
          "contactEmail": "hostmaster.at.stackit.cloud.",
          "creationFinished": "2022-01-31T10:00:00Z",
          "creationStarted": "2022-01-31T10:00:00Z",
          "defaultTTL": 3600,
          "description": "this is our example zone",
          "dnsName": "example.com",
          "error": "error message",
          "expireTime": 1209600,
          "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
          "isReverseZone": false,
          "name": "test",
          "negativeCache": 60,
          "primaries": [
            "1.2.3.4"
          ],
          "primaryNameServer": "example.com",
          "recordCount": 300,
          "refreshTime": 3600,
          "retryTime": 600,
          "serialNumber": 2022111400,
          "state": "CREATE_SUCCEEDED",
          "type": "primary",
          "updateFinished": "2022-01-31T10:00:00Z",
          "updateStarted": "2022-01-31T10:00:00Z",
          "visibility": "public"
        },
        "properties": {
          "acl": {
            "description": "access control list",
            "example": "0.0.0.0/0,::/0",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "contactEmail": {
            "description": "contact email from soa record",
            "example": "hostmaster.at.stackit.cloud.",
            "maxLength": 255,
            "type": "string"
          },
          "creationFinished": {
            "description": "when zone creation finished",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "creationStarted": {
            "description": "when zone creation started",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "defaultTTL": {
            "description": "default time to live",
            "example": 3600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "description": {
            "description": "description of the zone",
            "example": "this is our example zone",
            "maxLength": 1024,
            "type": "string"
          },
          "dnsName": {
            "description": "zone name",
            "example": "example.com",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          },
          "error": {
            "description": "Error shows error in case create/update/delete failed",
            "example": "error message",
            "maxLength": 2000,
            "type": "string"
          },
          "expireTime": {
            "description": "expire time",
            "example": 1209600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "id": {
            "description": "zone id",
            "example": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
            "type": "string"
          },
          "isReverseZone": {
            "description": "if the zone is a reverse zone or not",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "user given name",
            "example": "test",
            "maxLength": 63,
            "minLength": 1,
            "type": "string"
          },
          "negativeCache": {
            "description": "negative caching",
            "example": 60,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "primaries": {
            "description": "primary name server for secondary zone",
            "example": [
              "1.2.3.4"
            ],
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "type": "array"
          },
          "primaryNameServer": {
            "description": "primary name server. FQDN",
            "example": "example.com",
            "type": "string"
          },
          "recordCount": {
            "description": "record count how many records are in the zone",
            "example": 300,
            "minimum": 0,
            "type": "integer"
          },
          "refreshTime": {
            "description": "refresh time",
            "example": 3600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "retryTime": {
            "description": "retry time",
            "example": 600,
            "maximum": 99999999,
            "minimum": 60,
            "type": "integer"
          },
          "serialNumber": {
            "description": "serial number",
            "example": 2022111400,
            "type": "integer"
          },
          "state": {
            "description": "zone state",
            "enum": [
              "CREATING",
              "CREATE_SUCCEEDED",
              "CREATE_FAILED",
              "DELETING",
              "DELETE_SUCCEEDED",
              "DELETE_FAILED",
              "UPDATING",
              "UPDATE_SUCCEEDED",
              "UPDATE_FAILED"
            ],
            "example": "CREATE_SUCCEEDED",
            "type": "string"
          },
          "type": {
            "description": "zone type",
            "enum": [
              "primary",
              "secondary"
            ],
            "example": "primary",
            "type": "string"
          },
          "updateFinished": {
            "description": "when zone update/deletion finished",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "updateStarted": {
            "description": "when zone update/deletion started",
            "example": "2022-01-31T10:00:00Z",
            "type": "string"
          },
          "visibility": {
            "description": "visibility of the zone",
            "enum": [
              "public"
            ],
            "example": "public",
            "type": "string"
          }
        },
        "required": [
          "acl",
          "creationFinished",
          "creationStarted",
          "defaultTTL",
          "dnsName",
          "expireTime",
          "id",
          "name",
          "negativeCache",
          "primaryNameServer",
          "refreshTime",
          "retryTime",
          "serialNumber",
          "state",
          "type",
          "updateFinished",
          "updateStarted",
          "visibility"
        ],
        "type": "object"
      },
      "RecordSetResponse": {
        "description": "ResponseRRSet for rr set info.",
        "example": {
          "message": "Success",
          "rrset": {
            "active": true,
            "comment": "This is a comment",
            "creationFinished": "2022-01-31T10:00:00Z",
            "creationStarted": "2022-01-31T10:00:00Z",
            "error": "error message",
            "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
            "name": "example.com.",
            "records": [
              {
                "content": "1.2.3.4",
                "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
              },
              {
                "content": "1.2.3.4",
                "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
              }
            ],
            "state": "CREATE_SUCCEEDED",
            "ttl": 3600,
            "type": "A",
            "updateFinished": "2022-01-31T10:00:00Z",
            "updateStarted": "2022-01-31T10:00:00Z"
          }
        },
        "properties": {
          "message": {
            "example": "Success",
            "type": "string"
          },
          "rrset": {
            "$ref": "#/components/schemas/RecordSet"
          }
        },
        "required": [
          "rrset"
        ],
        "type": "object"
      },
      "RecordPayload": {
        "description": "RecordPost for rr set info.",
        "properties": {
          "content": {
            "description": "content of the record",
            "example": "1.2.3.4",
            "maxLength": 64000,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "type": "object"
      },
      "MoveCodeValidationRequest": {
        "description": "PostValidateMoveCodeRequest body to validate move code request.",
        "properties": {
          "code": {
            "description": "code that should be validated. It validates if it is valid, not expired and belongs to the zone.",
            "example": "3sLuLCLpLEbbQ6GZ05tu2U56dmKx1uCdWquTHz6BK34=",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "MoveZoneRequest": {
        "description": "body to move zone from one project to another.",
        "properties": {
          "code": {
            "description": "Code to move the zone. It must be valid, not expired and belong",
            "example": "3sLuLCLpLEbbQ6GZ05tu2U56dmKx1uCdWquTHz6BK34=",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "zoneDnsName": {
            "description": "ZoneDnsName is the dns name of the zone to move",
            "example": "example.com",
            "maxLength": 253,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "code",
          "zoneDnsName"
        ],
        "type": "object"
      },
      "RecordSetsResponse": {
        "description": "ResponseRRSetAll.",
        "example": {
          "itemsPerPage": 0,
          "message": "Success",
          "rrSets": [
            {
              "active": true,
              "comment": "This is a comment",
              "creationFinished": "2022-01-31T10:00:00Z",
              "creationStarted": "2022-01-31T10:00:00Z",
              "error": "error message",
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
              "name": "example.com.",
              "records": [
                {
                  "content": "1.2.3.4",
                  "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
                },
                {
                  "content": "1.2.3.4",
                  "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
                }
              ],
              "state": "CREATE_SUCCEEDED",
              "ttl": 3600,
              "type": "A",
              "updateFinished": "2022-01-31T10:00:00Z",
              "updateStarted": "2022-01-31T10:00:00Z"
            },
            {
              "active": true,
              "comment": "This is a comment",
              "creationFinished": "2022-01-31T10:00:00Z",
              "creationStarted": "2022-01-31T10:00:00Z",
              "error": "error message",
              "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96",
              "name": "example.com.",
              "records": [
                {
                  "content": "1.2.3.4",
                  "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
                },
                {
                  "content": "1.2.3.4",
                  "id": "37403b63-86ce-41e9-9b0b-1d8c5b3b2b96"
                }
              ],
              "state": "CREATE_SUCCEEDED",
              "ttl": 3600,
              "type": "A",
              "updateFinished": "2022-01-31T10:00:00Z",
              "updateStarted": "2022-01-31T10:00:00Z"
            }
          ],
          "totalItems": 6,
          "totalPages": 1
        },
        "properties": {
          "itemsPerPage": {
            "type": "integer"
          },
          "message": {
            "example": "Success",
            "type": "string"
          },
          "rrSets": {
            "items": {
              "$ref": "#/components/schemas/RecordSet"
            },
            "type": "array"
          },
          "totalItems": {
            "type": "integer"
          },
          "totalPages": {
            "type": "integer"
          }
        },
        "required": [
          "itemsPerPage",
          "rrSets",
          "totalItems",
          "totalPages"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-dns@mail.schwarz",
      "name": "stackit-dns"
    },
    "description": "This api provides dns",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "STACKIT DNS API",
    "version": "1.0"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/projects/{projectId}/zones": {
      "get": {
        "description": "All zone",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "page",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "page size",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "filter dns name equal",
            "in": "query",
            "name": "dnsName[eq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter dns name like",
            "in": "query",
            "name": "dnsName[like]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter type",
            "in": "query",
            "name": "type[eq]",
            "schema": {
              "enum": [
                "primary",
                "secondary"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter name equal",
            "in": "query",
            "name": "name[eq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter name not equal",
            "in": "query",
            "name": "name[neq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter name like",
            "in": "query",
            "name": "name[like]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter description equal",
            "in": "query",
            "name": "description[eq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter description not equal",
            "in": "query",
            "name": "description[neq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter description like",
            "in": "query",
            "name": "description[like]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter state",
            "in": "query",
            "name": "state[eq]",
            "schema": {
              "enum": [
                "CREATING",
                "CREATE_SUCCEEDED",
                "CREATE_FAILED",
                "DELETING",
                "DELETE_SUCCEEDED",
                "DELETE_FAILED",
                "UPDATING",
                "UPDATE_SUCCEEDED",
                "UPDATE_FAILED"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter state",
            "in": "query",
            "name": "state[neq]",
            "schema": {
              "enum": [
                "CREATING",
                "CREATE_SUCCEEDED",
                "CREATE_FAILED",
                "DELETING",
                "DELETE_SUCCEEDED",
                "DELETE_FAILED",
                "UPDATING",
                "UPDATE_SUCCEEDED",
                "UPDATE_FAILED"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter primary name server equal",
            "in": "query",
            "name": "primaryNameServer[eq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter primary name server like",
            "in": "query",
            "name": "primaryNameServer[like]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter reverse zone equal",
            "in": "query",
            "name": "isReverseZone[eq]",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter active equal",
            "in": "query",
            "name": "active[eq]",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter creation started greater with utc timestamp",
            "in": "query",
            "name": "creationStarted[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started lesser with utc timestamp",
            "in": "query",
            "name": "creationStarted[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started greater equal with utc timestamp",
            "in": "query",
            "name": "creationStarted[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started lesser equal with utc timestamp",
            "in": "query",
            "name": "creationStarted[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished greater with utc timestamp",
            "in": "query",
            "name": "creationFinished[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished lesser with utc timestamp",
            "in": "query",
            "name": "creationFinished[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished greater equal with utc timestamp",
            "in": "query",
            "name": "creationFinished[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished lesser equal with utc timestamp",
            "in": "query",
            "name": "creationFinished[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started greater with utc timestamp",
            "in": "query",
            "name": "updateStarted[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started lesser with utc timestamp",
            "in": "query",
            "name": "updateStarted[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started greater equal with utc timestamp",
            "in": "query",
            "name": "updateStarted[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started lesser equal with utc timestamp",
            "in": "query",
            "name": "updateStarted[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished greater with utc timestamp",
            "in": "query",
            "name": "updateFinished[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished lesser with utc timestamp",
            "in": "query",
            "name": "updateFinished[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished greater equal with utc timestamp",
            "in": "query",
            "name": "updateFinished[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished lesser equal with utc timestamp",
            "in": "query",
            "name": "updateFinished[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "order by dns name",
            "in": "query",
            "name": "orderBy[dnsName]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by name",
            "in": "query",
            "name": "orderBy[name]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by record count",
            "in": "query",
            "name": "orderBy[recordCount]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by type",
            "in": "query",
            "name": "orderBy[type]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by description",
            "in": "query",
            "name": "orderBy[description]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by creationStarted",
            "in": "query",
            "name": "orderBy[creationStarted]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by creationFinished",
            "in": "query",
            "name": "orderBy[creationFinished]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by updateStarted",
            "in": "query",
            "name": "orderBy[updateStarted]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by updateFinished",
            "in": "query",
            "name": "orderBy[updateFinished]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZonesResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "All get selected zones",
        "operationId": "GetZones"
      },
      "post": {
        "description": "Post zone create a new zone",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateZonePayload"
              }
            }
          },
          "description": "zone to create",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Conflict"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Post create a new zone",
        "operationId": "CreateZone"
      }
    },
    "/v1/projects/{projectId}/zones/{zoneId}": {
      "delete": {
        "description": "Delete a zone",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Delete a zone",
        "operationId": "DeleteZone"
      },
      "get": {
        "description": "Get zone",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Get a single zone",
        "operationId": "GetZone"
      },
      "patch": {
        "description": "Patch update an existing zone",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateZonePayload"
              }
            }
          },
          "description": "zone to update",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Patch update an existing zone",
        "operationId": "UpdateZone"
      }
    },
    "/v1/projects/{projectId}/zones/{zoneId}/rrsets": {
      "get": {
        "description": "All RRSet",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "page",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "page size",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 100,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "filter name equal",
            "in": "query",
            "name": "name[eq]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter name like",
            "in": "query",
            "name": "name[like]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter type",
            "in": "query",
            "name": "type[eq]",
            "schema": {
              "enum": [
                "A",
                "AAAA",
                "SOA",
                "CNAME",
                "NS",
                "MX",
                "TXT",
                "SRV",
                "PTR",
                "ALIAS",
                "DNAME",
                "CAA"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter state",
            "in": "query",
            "name": "state[eq]",
            "schema": {
              "enum": [
                "CREATING",
                "CREATE_SUCCEEDED",
                "CREATE_FAILED",
                "DELETING",
                "DELETE_SUCCEEDED",
                "DELETE_FAILED",
                "UPDATING",
                "UPDATE_SUCCEEDED",
                "UPDATE_FAILED"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter state",
            "in": "query",
            "name": "state[neq]",
            "schema": {
              "enum": [
                "CREATING",
                "CREATE_SUCCEEDED",
                "CREATE_FAILED",
                "DELETING",
                "DELETE_SUCCEEDED",
                "DELETE_FAILED",
                "UPDATING",
                "UPDATE_SUCCEEDED",
                "UPDATE_FAILED"
              ],
              "type": "string"
            }
          },
          {
            "description": "filter active equal",
            "in": "query",
            "name": "active[eq]",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "filter creation started greater with utc timestamp",
            "in": "query",
            "name": "creationStarted[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started lesser with utc timestamp",
            "in": "query",
            "name": "creationStarted[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started greater equal with utc timestamp",
            "in": "query",
            "name": "creationStarted[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation started lesser equal with utc timestamp",
            "in": "query",
            "name": "creationStarted[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished greater with utc timestamp",
            "in": "query",
            "name": "creationFinished[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished lesser with utc timestamp",
            "in": "query",
            "name": "creationFinished[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished greater equal with utc timestamp",
            "in": "query",
            "name": "creationFinished[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter creation finished lesser equal with utc timestamp",
            "in": "query",
            "name": "creationFinished[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started greater with utc timestamp",
            "in": "query",
            "name": "updateStarted[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started lesser with utc timestamp",
            "in": "query",
            "name": "updateStarted[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started greater equal with utc timestamp",
            "in": "query",
            "name": "updateStarted[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update started lesser equal with utc timestamp",
            "in": "query",
            "name": "updateStarted[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished greater with utc timestamp",
            "in": "query",
            "name": "updateFinished[gt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished lesser with utc timestamp",
            "in": "query",
            "name": "updateFinished[lt]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished greater equal with utc timestamp",
            "in": "query",
            "name": "updateFinished[gte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "filter update finished lesser equal with utc timestamp",
            "in": "query",
            "name": "updateFinished[lte]",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "order by name",
            "in": "query",
            "name": "orderBy[name]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by creationStarted",
            "in": "query",
            "name": "orderBy[creationStarted]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by creationFinished",
            "in": "query",
            "name": "orderBy[creationFinished]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by updateStarted",
            "in": "query",
            "name": "orderBy[updateStarted]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by updateFinished",
            "in": "query",
            "name": "orderBy[updateFinished]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by type",
            "in": "query",
            "name": "orderBy[type]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by state",
            "in": "query",
            "name": "orderBy[state]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "order by record count",
            "in": "query",
            "name": "orderBy[recordCount]",
            "schema": {
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordSetsResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "All get selected RRSets",
        "operationId": "GetRecordSets"
      },
      "post": {
        "description": "Post record set",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecordSetPayload"
              }
            }
          },
          "description": "record set to create",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordSetResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Conflict"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Post record set",
        "operationId": "CreateRecordSet"
      }
    },
    "/v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}": {
      "delete": {
        "description": "Delete a record set",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "record set id",
            "in": "path",
            "name": "rrSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Delete a record set",
        "operationId": "DeleteRecordSet"
      },
      "get": {
        "description": "Get rrset",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "record set id",
            "in": "path",
            "name": "rrSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordSetResponse"
                }
              }
            },
            "description": "OK"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Get a single rrset",
        "operationId": "GetRecordSet"
      },
      "patch": {
        "description": "Patch record set",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "record set id",
            "in": "path",
            "name": "rrSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecordSetPayload"
              }
            }
          },
          "description": "record set to patch",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "Patch updates a record set",
        "operationId": "UpdateRecordSet"
      }
    },
    "/v1/projects/{projectId}/zones/{zoneId}/rrsets/{rrSetId}/records": {
      "patch": {
        "description": "PatchRecords rrset updates a record in a rrset",
        "parameters": [
          {
            "description": "project id",
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "zone id",
            "in": "path",
            "name": "zoneId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "record set id",
            "in": "path",
            "name": "rrSetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRecordPayload"
              }
            }
          },
          "description": "rrset to update",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Not Found"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            },
            "description": "Bad Gateway"
          }
        },
        "summary": "PatchRecords updates a record in a rrset",
        "operationId": "UpdateRecord"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "prod",
      "url": "https://dns.api.{region}stackit.cloud",
      "variables": {
        "region": {
          "default": ""
        }
      }
    }
  ]
}